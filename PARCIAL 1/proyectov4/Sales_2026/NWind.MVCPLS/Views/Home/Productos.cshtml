@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Productos</title>
    <style>
        body {
            font-family: 'Roboto', sans-serif;
            background-color: #f4f6f9;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background: linear-gradient(135deg, #d6f0ff 0%, #b3e5fc 100%);
        }
    </style>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <div class="container mt-5">
        <div class="row">
            <div class="col-md-8 offset-md-2">
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h2 class="mb-0">Crear Producto</h2>
                    </div>
                    <div class="card-body">
                        @using (Html.BeginForm("Productos", "Home", FormMethod.Post, new { @class = "needs-validation", id = "createProductForm", novalidate = "novalidate" }))
                        {
                            @Html.AntiForgeryToken()

                            <div class="mb-3">
                                <label for="productName" class="form-label">Nombre del Producto:</label>
                                <input type="text" class="form-control" id="productName" name="productName" required oninput="validarEntrada(this)" />
                                <div class="invalid-feedback">
                                    Por favor, ingrese el nombre del producto.
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="categoryId" class="form-label">Categoría:</label>
                                <select class="form-control" id="categoryId" name="categoryId" required>
                                    <option value="">Seleccione una categoría</option>
                                </select>
                                <div class="invalid-feedback">
                                    Por favor, seleccione una categoría.
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="unitPrice" class="form-label">Precio Unitario:</label>
                                <input type="number" step="0.01" class="form-control" id="unitPrice" name="unitPrice" required oninput="validarEntrada(this)" />
                                <div class="invalid-feedback">
                                    Por favor, ingrese el precio unitario.
                                </div>
                            </div>
                            <div class="mb-3">
                                <label for="unitsInStock" class="form-label">Unidades en Stock:</label>
                                <input type="number" class="form-control" id="unitsInStock" name="unitsInStock" required oninput="validarEntrada(this)" />
                                <div class="invalid-feedback">
                                    Por favor, ingrese las unidades en stock.
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary">Crear Producto</button>
                        }

                        @if (ViewBag.Message != null)
                        {
                            <div class="alert alert-success mt-3">
                                @ViewBag.Message
                            </div>
                        }

                    </div>
                </div>

                <!-- Buscar productos -->
                <div class="card mb-4">
                    <div class="card-header bg-secondary text-white">
                        <h3 class="mb-0">Buscar Productos</h3>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <input type="text" id="searchProduct" class="form-control" placeholder="Buscar por Nombre o ID" oninput="validarEntrada(this)">
                            </div>
                        </div>
                        <button class="btn btn-primary" onclick="buscarProductos()">Buscar</button>
                        <button class="btn btn-primary" onclick="buscarProductosPorCategoria()">Buscar por categoría</button>
                    </div>
                </div>

                <!-- Mostrar productos -->
                <div class="card">
                    <div class="card-header bg-info text-white">
                        <h3 class="mb-0">Resultados</h3>
                    </div>
                    <div class="card-body">
                        <table class="table table-striped table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Nombre</th>
                                    <th>Categoría</th>
                                    <th>Precio</th>
                                    <th>Unidades en Stock</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody id="resultadosProductos">
                                <!-- Resultados de búsqueda se insertarán aquí -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para Actualizar Producto -->
    <div class="modal fade" id="actualizarModalProducto" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Actualizar Producto</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="updateProductId" />
                    <div class="mb-3">
                        <label for="updateProductName" class="form-label">Nombre del Producto:</label>
                        <input type="text" class="form-control" id="updateProductName" oninput="validarEntrada(this)">
                    </div>
                    <div class="mb-3">
                        <label for="updateCategoryId" class="form-label">Categoría:</label>
                        <select class="form-control" id="updateCategoryId" required>
                            <option value="">Seleccione una categoría</option>
                        </select>
                        <div class="invalid-feedback">
                            Por favor, seleccione una categoría.
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="updateUnitPrice" class="form-label">Precio Unitario:</label>
                        <input type="number" step="0.01" class="form-control" id="updateUnitPrice" oninput="validarEntrada(this)">
                    </div>
                    <div class="mb-3">
                        <label for="updateUnitsInStock" class="form-label">Unidades en Stock:</label>
                        <input type="number" class="form-control" id="updateUnitsInStock" oninput="validarEntrada(this)">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="button" class="btn btn-primary" onclick="confirmarActualizacionProducto()">Guardar Cambios</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Validar campos para evitar símbolos < y >
        function validarEntrada(input) {
            const invalidChars = /[<>]/g;
            if (invalidChars.test(input.value)) {
                input.value = input.value.replace(invalidChars, '');
                alert('Los caracteres < y > no están permitidos.');
            }
        }

        function escaparHTML(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        function obtenerCategorias() {
            const categorySelect = document.getElementById('categoryId');
            categorySelect.innerHTML = '<option value="">Seleccione una categoría</option>';

            fetch('/Home/ObtenerCategorias')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const categorias = data.categorias;
                        categorias.forEach(categoria => {
                            const option = document.createElement('option');
                            option.value = categoria.CATEGORYID;
                            option.textContent = escaparHTML(categoria.CATEGORYNAME);
                            categorySelect.appendChild(option);
                        });
                    } else {
                        alert('Error al obtener las categorías: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Ocurrió un error al cargar las categorías.');
                });
        }

        document.addEventListener('DOMContentLoaded', obtenerCategorias);

        (function () {
            'use strict'
            var forms = document.querySelectorAll('.needs-validation')
            Array.prototype.slice.call(forms)
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }
                        form.classList.add('was-validated')
                    }, false)
                })
        })()

        function buscarProductos() {
            const nombre = document.getElementById('searchProduct').value;
            const resultadosProductos = document.getElementById('resultadosProductos');
            resultadosProductos.innerHTML = '';

            fetch(`/Home/BuscarProductos?nombre=${encodeURIComponent(nombre)}`)
                .then(response => response.json())
                .then(productos => {
                    if (productos && productos.length > 0) {
                        productos.forEach(producto => {
                            const tr = document.createElement('tr');
                            tr.innerHTML = `
                                        <td>${escaparHTML(producto.ProductID)}</td>
                                        <td>${escaparHTML(producto.ProductName)}</td>
                                        <td>${escaparHTML(producto.CategoryID)}</td>
                                        <td>${escaparHTML(producto.UnitPrice)}</td>
                                        <td>${escaparHTML(producto.UnitsInStock)}</td>
                                        <td>
                                            <button class="btn btn-warning btn-sm me-2" onclick="abrirModalActualizarProducto(${producto.ProductID}, '${escaparHTML(producto.ProductName)}', ${producto.CategoryID}, ${producto.UnitPrice}, ${producto.UnitsInStock})">Actualizar</button>
                                            <button class="btn btn-danger btn-sm" onclick="eliminarProducto(${producto.ProductID})">Eliminar</button>
                                        </td>
                                    `;
                            resultadosProductos.appendChild(tr);
                        });
                    } else {
                        resultadosProductos.innerHTML = '<tr><td colspan="6" class="text-center">No se encontraron resultados</td></tr>';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    resultadosProductos.innerHTML = '<tr><td colspan="6" class="text-center">Error al buscar productos</td></tr>';
                });
        }

        function buscarProductosPorCategoria() {
            const nombre = document.getElementById('searchProduct').value;
            const resultadosProductos = document.getElementById('resultadosProductos');
            resultadosProductos.innerHTML = '';

            fetch(`/Home/BuscarProductosCategoria?id=${encodeURIComponent(nombre)}`)
                .then(response => response.json())
                .then(productos => {
                    if (productos && productos.length > 0) {
                        productos.forEach(producto => {
                            const tr = document.createElement('tr');
                            tr.innerHTML = `
                                        <td>${escaparHTML(producto.ProductID)}</td>
                                        <td>${escaparHTML(producto.ProductName)}</td>
                                        <td>${escaparHTML(producto.CategoryID)}</td>
                                        <td>${escaparHTML(producto.UnitPrice)}</td>
                                        <td>${escaparHTML(producto.UnitsInStock)}</td>
                                        <td>
                                            <button class="btn btn-warning btn-sm me-2" onclick="abrirModalActualizarProducto(${producto.ProductID}, '${escaparHTML(producto.ProductName)}', ${producto.CategoryID}, ${producto.UnitPrice}, ${producto.UnitsInStock})">Actualizar</button>
                                            <button class="btn btn-danger btn-sm" onclick="eliminarProducto(${producto.ProductID})">Eliminar</button>
                                        </td>
                                    `;
                            resultadosProductos.appendChild(tr);
                        });
                    } else {
                        resultadosProductos.innerHTML = '<tr><td colspan="6" class="text-center">No se encontraron resultados</td></tr>';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    resultadosProductos.innerHTML = '<tr><td colspan="6" class="text-center">Error al buscar productos</td></tr>';
                });
        }

        function abrirModalActualizarProducto(productId, productName, categoryId, unitPrice, unitsInStock) {
            document.getElementById('updateProductId').value = productId;
            document.getElementById('updateProductName').value = productName;
            document.getElementById('updateCategoryId').value = categoryId;
            document.getElementById('updateUnitPrice').value = unitPrice;
            document.getElementById('updateUnitsInStock').value = unitsInStock;

            obtenerCategoriasActualizar(categoryId);

            var myModal = new bootstrap.Modal(document.getElementById('actualizarModalProducto'));
            myModal.show();
        }

        function obtenerCategoriasActualizar(selectedCategoryId) {
            const categorySelect = document.getElementById('updateCategoryId');
            categorySelect.innerHTML = '<option value="">Seleccione una categoría</option>';

            fetch('/Home/ObtenerCategorias')
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const categorias = data.categorias;
                        categorias.forEach(categoria => {
                            const option = document.createElement('option');
                            option.value = categoria.CATEGORYID;
                            option.textContent = escaparHTML(categoria.CATEGORYNAME);
                            if (categoria.CATEGORYID === selectedCategoryId) {
                                option.selected = true;
                            }
                            categorySelect.appendChild(option);
                        });
                    } else {
                        alert('Error al obtener las categorías: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Ocurrió un error al cargar las categorías.');
                });
        }

        function confirmarActualizacionProducto() {
            const productId = document.getElementById('updateProductId').value;
            const productName = document.getElementById('updateProductName').value;
            const categoryId = document.getElementById('updateCategoryId').value;
            const unitPrice = document.getElementById('updateUnitPrice').value;
            const unitsInStock = document.getElementById('updateUnitsInStock').value;

            fetch(`/Home/ActualizarProducto`, {
                method: 'POST',
                body: JSON.stringify({
                    productId,
                    productName,
                    categoryId,
                    unitPrice,
                    unitsInStock
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Producto actualizado correctamente');
                        location.reload();
                    } else {
                        alert('No se pudo actualizar el producto. Verifique que se encuentre autorizado o que el nombre del producto no esté registrado.');
                    }
                })
                .catch(error => console.error('Error al actualizar el producto', error));
        }

        function eliminarProducto(id) {
            if (confirm(`¿Está seguro de eliminar el producto con ID ${id}?`)) {
                fetch('/Home/EliminarProducto', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id: id })
                })
                    .then(response => response.json())
                    .then(result => {
                        if (result.success) {
                            alert('Producto eliminado exitosamente');
                            location.reload();
                        } else {
                            alert('No está autorizado a eliminar un producto o ya existe un producto con ese nombre.');
                        }
                    })
                    .catch(error => console.error('Error al eliminar el producto', error));
            }
        }
    </script>
</body>
</html>
