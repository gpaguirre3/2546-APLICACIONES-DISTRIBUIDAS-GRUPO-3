è
dD:\ESCRITORIO\septimo\distribuidas\proyecto\Sales_2026\NWindProxyService1\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str -
)- .
]. /
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str /
)/ 0
]0 1
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *øœ
RD:\ESCRITORIO\septimo\distribuidas\proyecto\Sales_2026\NWindProxyService1\Proxy.cs
	namespace 	
NWindProxyService1
 
{ 
public 

class 
Proxy 
: 
IProductService (
,( )
ICategoryService* :
{ 
string 
BaseAddress 
= 
$str 5
;5 6
public 
async 
Task 
< 
T 
> 
SendPost %
<% &
T& '
,' (
PostData) 1
>1 2
(2 3
string3 9

requestURI: D
,D E
PostDataF N
dataO S
,S T
stringU [
bearerToken\ g
)g h
{ 	
T 
result 
= 
default 
( 
T  
)  !
;! "
using 
( 
var 
client 
= 
new  #

HttpClient$ .
(. /
)/ 0
)0 1
{ 
try 
{ 

requestURI 
=  
BaseAddress! ,
+- .

requestURI/ 9
;9 :
client   
.   !
DefaultRequestHeaders   0
.  0 1
Accept  1 7
.  7 8
Clear  8 =
(  = >
)  > ?
;  ? @
client!! 
.!! !
DefaultRequestHeaders!! 0
.!!0 1
Accept!!1 7
.!!7 8
Add!!8 ;
(!!; <
new!!< ?+
MediaTypeWithQualityHeaderValue!!@ _
(!!_ `
$str!!` r
)!!r s
)!!s t
;!!t u
if## 
(## 
!## 
string## 
.##  
IsNullOrEmpty##  -
(##- .
bearerToken##. 9
)##9 :
)##: ;
{$$ 
client%% 
.%% !
DefaultRequestHeaders%% 4
.%%4 5
Authorization%%5 B
=%%C D
new%%E H%
AuthenticationHeaderValue%%I b
(%%b c
$str%%c k
,%%k l
bearerToken%%m x
)%%x y
;%%y z
}&& 
var)) 
jsonData))  
=))! "
JsonConvert))# .
.)). /
SerializeObject))/ >
())> ?
data))? C
)))C D
;))D E
var** 
content** 
=**  !
new**" %
StringContent**& 3
(**3 4
jsonData**4 <
,**< =
Encoding**> F
.**F G
UTF8**G K
,**K L
$str**M _
)**_ `
;**` a
HttpResponseMessage-- '
response--( 0
=--1 2
await--3 8
client--9 ?
.--? @
	PostAsync--@ I
(--I J

requestURI--J T
,--T U
content--V ]
)--] ^
;--^ _
var00 
resultWebAPI00 $
=00% &
await00' ,
response00- 5
.005 6
Content006 =
.00= >
ReadAsStringAsync00> O
(00O P
)00P Q
;00Q R
result11 
=11 
JsonConvert11 (
.11( )
DeserializeObject11) :
<11: ;
T11; <
>11< =
(11= >
resultWebAPI11> J
)11J K
;11K L
}22 
catch33 
(33 
	Exception33  
ex33! #
)33# $
{44 
}66 
}77 
return88 
result88 
;88 
}99 	
public<< 
async<< 
Task<< 
<<< 
T<< 
><< 
SendPut<< $
<<<$ %
T<<% &
,<<& '
PutData<<( /
><</ 0
(<<0 1
string<<1 7

requestURI<<8 B
,<<B C
PutData<<D K
data<<L P
,<<P Q
string<<R X
bearerToken<<Y d
)<<d e
{== 	
T>> 
result>> 
=>> 
default>> 
(>> 
T>>  
)>>  !
;>>! "
using?? 
(?? 
var?? 
client?? 
=?? 
new??  #

HttpClient??$ .
(??. /
)??/ 0
)??0 1
{@@ 
tryAA 
{BB 

requestURIDD 
=DD  
BaseAddressDD! ,
+DD- .

requestURIDD/ 9
;DD9 :
clientGG 
.GG !
DefaultRequestHeadersGG 0
.GG0 1
AcceptGG1 7
.GG7 8
ClearGG8 =
(GG= >
)GG> ?
;GG? @
clientHH 
.HH !
DefaultRequestHeadersHH 0
.HH0 1
AcceptHH1 7
.HH7 8
AddHH8 ;
(HH; <
newHH< ?+
MediaTypeWithQualityHeaderValueHH@ _
(HH_ `
$strHH` r
)HHr s
)HHs t
;HHt u
ifJJ 
(JJ 
!JJ 
stringJJ 
.JJ  
IsNullOrEmptyJJ  -
(JJ- .
bearerTokenJJ. 9
)JJ9 :
)JJ: ;
{KK 
clientLL 
.LL !
DefaultRequestHeadersLL 4
.LL4 5
AuthorizationLL5 B
=LLC D
newLLE H%
AuthenticationHeaderValueLLI b
(LLb c
$strLLc k
,LLk l
bearerTokenLLm x
)LLx y
;LLy z
}MM 
varPP 
jsonDataPP  
=PP! "
JsonConvertPP# .
.PP. /
SerializeObjectPP/ >
(PP> ?
dataPP? C
)PPC D
;PPD E
varQQ 
contentQQ 
=QQ  !
newQQ" %
StringContentQQ& 3
(QQ3 4
jsonDataQQ4 <
,QQ< =
EncodingQQ> F
.QQF G
UTF8QQG K
,QQK L
$strQQM _
)QQ_ `
;QQ` a
HttpResponseMessageTT '
responseTT( 0
=TT1 2
awaitTT3 8
clientTT9 ?
.TT? @
PutAsyncTT@ H
(TTH I

requestURITTI S
,TTS T
contentTTU \
)TT\ ]
;TT] ^
varWW 
resultWebAPIWW $
=WW% &
awaitWW' ,
responseWW- 5
.WW5 6
ContentWW6 =
.WW= >
ReadAsStringAsyncWW> O
(WWO P
)WWP Q
;WWQ R
resultXX 
=XX 
JsonConvertXX (
.XX( )
DeserializeObjectXX) :
<XX: ;
TXX; <
>XX< =
(XX= >
resultWebAPIXX> J
)XXJ K
;XXK L
}YY 
catchZZ 
(ZZ 
	ExceptionZZ  
exZZ! #
)ZZ# $
{[[ 
}]] 
}^^ 
return__ 
result__ 
;__ 
}`` 	
publicaa 
asyncaa 
Taskaa 
<aa 
boolaa 
>aa 

SendDeleteaa  *
(aa* +
stringaa+ 1

requestURIaa2 <
,aa< =
stringaa> D
bearerTokenaaE P
)aaP Q
{bb 	
usingcc 
(cc 
varcc 
clientcc 
=cc 
newcc  #

HttpClientcc$ .
(cc. /
)cc/ 0
)cc0 1
{dd 
tryee 
{ff 

requestURIhh 
=hh  
BaseAddresshh! ,
+hh- .

requestURIhh/ 9
;hh9 :
clientkk 
.kk !
DefaultRequestHeaderskk 0
.kk0 1
Acceptkk1 7
.kk7 8
Clearkk8 =
(kk= >
)kk> ?
;kk? @
clientll 
.ll !
DefaultRequestHeadersll 0
.ll0 1
Acceptll1 7
.ll7 8
Addll8 ;
(ll; <
newll< ?+
MediaTypeWithQualityHeaderValuell@ _
(ll_ `
$strll` r
)llr s
)lls t
;llt u
ifnn 
(nn 
!nn 
stringnn 
.nn  
IsNullOrEmptynn  -
(nn- .
bearerTokennn. 9
)nn9 :
)nn: ;
{oo 
clientpp 
.pp !
DefaultRequestHeaderspp 4
.pp4 5
Authorizationpp5 B
=ppC D
newppE H%
AuthenticationHeaderValueppI b
(ppb c
$strppc k
,ppk l
bearerTokenppm x
)ppx y
;ppy z
}qq 
HttpResponseMessagett '
responsett( 0
=tt1 2
awaittt3 8
clienttt9 ?
.tt? @
DeleteAsynctt@ K
(ttK L

requestURIttL V
)ttV W
;ttW X
returnww 
responseww #
.ww# $
IsSuccessStatusCodeww$ 7
;ww7 8
}xx 
catchyy 
(yy 
	Exceptionyy  
exyy! #
)yy# $
{zz 
}|| 
}}} 
return~~ 
false~~ 
;~~ 
} 	
public
ÇÇ 
async
ÇÇ 
Task
ÇÇ 
<
ÇÇ 
T
ÇÇ 
>
ÇÇ 
SendGet
ÇÇ $
<
ÇÇ$ %
T
ÇÇ% &
>
ÇÇ& '
(
ÇÇ' (
string
ÇÇ( .

requestURI
ÇÇ/ 9
,
ÇÇ9 :
string
ÇÇ; A
bearerToken
ÇÇB M
)
ÇÇM N
{
ÉÉ 	
T
ÑÑ 
Result
ÑÑ 
=
ÑÑ 
default
ÑÑ 
(
ÑÑ 
T
ÑÑ  
)
ÑÑ  !
;
ÑÑ! "
using
ÖÖ 
(
ÖÖ 
var
ÖÖ 
Client
ÖÖ 
=
ÖÖ 
new
ÖÖ  #

HttpClient
ÖÖ$ .
(
ÖÖ. /
)
ÖÖ/ 0
)
ÖÖ0 1
{
ÜÜ 
try
áá 
{
àà 

requestURI
ââ 
=
ââ  
BaseAddress
ââ! ,
+
ââ- .

requestURI
ââ/ 9
;
ââ9 :
Client
åå 
.
åå #
DefaultRequestHeaders
åå 0
.
åå0 1
Accept
åå1 7
.
åå7 8
Clear
åå8 =
(
åå= >
)
åå> ?
;
åå? @
Client
çç 
.
çç #
DefaultRequestHeaders
çç 0
.
çç0 1
Accept
çç1 7
.
çç7 8
Add
çç8 ;
(
çç; <
new
éé -
MediaTypeWithQualityHeaderValue
éé ;
(
éé; <
$str
éé< N
)
ééN O
)
ééO P
;
ééP Q
if
êê 
(
êê 
!
êê 
string
êê 
.
êê  
IsNullOrEmpty
êê  -
(
êê- .
bearerToken
êê. 9
)
êê9 :
)
êê: ;
{
ëë 
Client
íí 
.
íí #
DefaultRequestHeaders
íí 4
.
íí4 5
Authorization
íí5 B
=
ííC D
new
ííE H'
AuthenticationHeaderValue
ííI b
(
ííb c
$str
ííc k
,
íík l
bearerToken
íím x
)
ííx y
;
ííy z
}
ìì 
var
ïï 

ResultJSON
ïï "
=
ïï# $
await
ïï% *
Client
ïï+ 1
.
ïï1 2
GetStringAsync
ïï2 @
(
ïï@ A

requestURI
ïïA K
)
ïïK L
;
ïïL M
Result
ññ 
=
ññ 
JsonConvert
ññ (
.
ññ( )
DeserializeObject
ññ) :
<
ññ: ;
T
ññ; <
>
ññ< =
(
ññ= >

ResultJSON
ññ> H
)
ññH I
;
ññI J
}
óó 
catch
òò 
(
òò 
	Exception
òò  
ex
òò! #
)
òò# $
{
ôô 
}
õõ 
}
úú 
return
ùù 
Result
ùù 
;
ùù 
}
ûû 	
public
°° 

Categories
°° 
Create
°°  
(
°°  !

Categories
°°! +
category
°°, 4
)
°°4 5
{
¢¢ 	
throw
££ 
new
££ %
NotImplementedException
££ -
(
££- .
)
££. /
;
££/ 0
}
§§ 	
public
¶¶ 
Products
¶¶ 
CreateProduct
¶¶ %
(
¶¶% &
Products
¶¶& .
products
¶¶/ 7
)
¶¶7 8
{
ßß 	
throw
®® 
new
®® %
NotImplementedException
®® -
(
®®- .
)
®®. /
;
®®/ 0
}
©© 	
public
´´ 
bool
´´ 
Delete
´´ 
(
´´ 
int
´´ 
id
´´ !
)
´´! "
{
¨¨ 	
throw
≠≠ 
new
≠≠ %
NotImplementedException
≠≠ -
(
≠≠- .
)
≠≠. /
;
≠≠/ 0
}
ÆÆ 	
public
∞∞ 
List
∞∞ 
<
∞∞ 

Categories
∞∞ 
>
∞∞ 
Filter
∞∞  &
(
∞∞& '
string
∞∞' -
name
∞∞. 2
)
∞∞2 3
{
±± 	
throw
≤≤ 
new
≤≤ %
NotImplementedException
≤≤ -
(
≤≤- .
)
≤≤. /
;
≤≤/ 0
}
≥≥ 	
public
∏∏ 

Categories
∏∏ 
RetrieveById
∏∏ &
(
∏∏& '
int
∏∏' *
id
∏∏+ -
)
∏∏- .
{
ππ 	
throw
∫∫ 
new
∫∫ %
NotImplementedException
∫∫ -
(
∫∫- .
)
∫∫. /
;
∫∫/ 0
}
ªª 	
public
ΩΩ 
Products
ΩΩ !
RetrieveProductById
ΩΩ +
(
ΩΩ+ ,
int
ΩΩ, /
id
ΩΩ0 2
)
ΩΩ2 3
{
ææ 	
throw
øø 
new
øø %
NotImplementedException
øø -
(
øø- .
)
øø. /
;
øø/ 0
}
¿¿ 	
public
¬¬ 
int
¬¬ 
Update
¬¬ 
(
¬¬ 

Categories
¬¬ $
categoryToUpdate
¬¬% 5
)
¬¬5 6
{
√√ 	
throw
ƒƒ 
new
ƒƒ %
NotImplementedException
ƒƒ -
(
ƒƒ- .
)
ƒƒ. /
;
ƒƒ/ 0
}
≈≈ 	
public
«« 
bool
«« 
UpdateProduct
«« !
(
««! "
Products
««" *
productToUpdate
««+ :
)
««: ;
{
»» 	
throw
…… 
new
…… %
NotImplementedException
…… -
(
……- .
)
……. /
;
……/ 0
}
   	
List
ÃÃ 
<
ÃÃ 
Products
ÃÃ 
>
ÃÃ 
IProductService
ÃÃ &
.
ÃÃ& '
Filter
ÃÃ' -
(
ÃÃ- .
string
ÃÃ. 4
name
ÃÃ5 9
)
ÃÃ9 :
{
ÕÕ 	
throw
ŒŒ 
new
ŒŒ %
NotImplementedException
ŒŒ -
(
ŒŒ- .
)
ŒŒ. /
;
ŒŒ/ 0
}
œœ 	
public
—— 
List
—— 
<
—— 

ProductDTO
—— 
>
—— +
FilterProductsDTOByCategoryID
——  =
(
——= >
int
——> A
ID
——B D
,
——D E
string
——F L
bearerToken
——M X
)
——X Y
{
““ 	
List
”” 
<
”” 

ProductDTO
”” 
>
”” 
Result
”” #
=
””$ %
null
””& *
;
””* +
Task
‘‘ 
.
‘‘ 
Run
‘‘ 
(
‘‘ 
async
‘‘ 
(
‘‘ 
)
‘‘ 
=>
‘‘  
Result
‘‘! '
=
‘‘( )
await
‘‘* /0
"FilterProductsDTOByCategoryIDAsync
’’ .
(
’’. /
ID
’’/ 1
,
’’1 2
bearerToken
’’3 >
)
’’> ?
)
’’? @
.
’’@ A
Wait
’’A E
(
’’E F
)
’’F G
;
’’G H
return
◊◊ 
Result
◊◊ 
;
◊◊ 
}
ÿÿ 	
public
⁄⁄ 
async
⁄⁄ 
Task
⁄⁄ 
<
⁄⁄ 
List
⁄⁄ 
<
⁄⁄ 

ProductDTO
⁄⁄ )
>
⁄⁄) *
>
⁄⁄* +0
"FilterProductsDTOByCategoryIDAsync
⁄⁄, N
(
⁄⁄N O
int
⁄⁄O R
ID
⁄⁄S U
,
⁄⁄U V
string
⁄⁄W ]
bearerToken
⁄⁄^ i
)
⁄⁄i j
{
€€ 	
return
‹‹ 
await
‹‹ 
SendGet
‹‹  
<
‹‹  !
List
‹‹! %
<
‹‹% &

ProductDTO
‹‹& 0
>
‹‹0 1
>
‹‹1 2
(
‹‹2 3
$"
›› 
$str
›› 0
{
››0 1
ID
››1 3
}
››3 4
"
››4 5
,
››5 6
bearerToken
››7 B
)
››B C
;
››C D
}
ﬁﬁ 	
public
·· 
async
·· 
Task
·· 
<
·· 

ProductDTO
·· $
>
··$ %#
CreateProductDTOAsync
··& ;
(
··; <

ProductDTO
··< F

newProduct
··G Q
,
··Q R
string
··S Y
bearerToken
··Z e
)
··e f
{
‚‚ 	
return
„„ 
await
„„ 
SendPost
„„ !
<
„„! "

ProductDTO
„„" ,
,
„„, -

ProductDTO
„„. 8
>
„„8 9
(
„„9 :
$str
„„: O
,
„„O P

newProduct
„„Q [
,
„„[ \
bearerToken
„„] h
)
„„h i
;
„„i j
}
‰‰ 	
public
ÊÊ 

ProductDTO
ÊÊ 
CreateProductDTO
ÊÊ *
(
ÊÊ* +

ProductDTO
ÊÊ+ 5

newProduct
ÊÊ6 @
,
ÊÊ@ A
string
ÊÊB H
bearerToken
ÊÊI T
)
ÊÊT U
{
ÁÁ 	

ProductDTO
ËË 
result
ËË 
=
ËË 
null
ËË  $
;
ËË$ %
Task
ÈÈ 
.
ÈÈ 
Run
ÈÈ 
(
ÈÈ 
async
ÈÈ 
(
ÈÈ 
)
ÈÈ 
=>
ÈÈ  
result
ÈÈ! '
=
ÈÈ( )
await
ÈÈ* /#
CreateProductDTOAsync
ÈÈ0 E
(
ÈÈE F

newProduct
ÈÈF P
,
ÈÈP Q
bearerToken
ÈÈR ]
)
ÈÈ] ^
)
ÈÈ^ _
.
ÈÈ_ `
Wait
ÈÈ` d
(
ÈÈd e
)
ÈÈe f
;
ÈÈf g
return
ÍÍ 
result
ÍÍ 
;
ÍÍ 
}
ÎÎ 	
public
ÓÓ 
async
ÓÓ 
Task
ÓÓ 
<
ÓÓ 

ProductDTO
ÓÓ $
>
ÓÓ$ %)
RetrieveProductDTOByIDAsync
ÓÓ& A
(
ÓÓA B
int
ÓÓB E
ID
ÓÓF H
,
ÓÓH I
string
ÓÓJ P
bearerToken
ÓÓQ \
)
ÓÓ\ ]
{
ÔÔ 	
return
 
await
 
SendGet
  
<
  !

ProductDTO
! +
>
+ ,
(
, -
$"
- /
$str
/ D
{
D E
ID
E G
}
G H
"
H I
,
I J
bearerToken
K V
)
V W
;
W X
}
ÒÒ 	
public
ÛÛ 

ProductDTO
ÛÛ !
RetrieveProductByID
ÛÛ -
(
ÛÛ- .
int
ÛÛ. 1
ID
ÛÛ2 4
,
ÛÛ4 5
string
ÛÛ6 <
bearerToken
ÛÛ= H
)
ÛÛH I
{
ÙÙ 	

ProductDTO
ıı 
result
ıı 
=
ıı 
null
ıı  $
;
ıı$ %
Task
ˆˆ 
.
ˆˆ 
Run
ˆˆ 
(
ˆˆ 
async
ˆˆ 
(
ˆˆ 
)
ˆˆ 
=>
ˆˆ  
result
ˆˆ! '
=
ˆˆ( )
await
ˆˆ* /)
RetrieveProductDTOByIDAsync
ˆˆ0 K
(
ˆˆK L
ID
ˆˆL N
,
ˆˆN O
bearerToken
ˆˆP [
)
ˆˆ[ \
)
ˆˆ\ ]
.
ˆˆ] ^
Wait
ˆˆ^ b
(
ˆˆb c
)
ˆˆc d
;
ˆˆd e
return
˜˜ 
result
˜˜ 
;
˜˜ 
}
¯¯ 	
public
˚˚ 
async
˚˚ 
Task
˚˚ 
<
˚˚ 
bool
˚˚ 
>
˚˚ #
UpdateProductDTOAsync
˚˚  5
(
˚˚5 6

ProductDTO
˚˚6 @
productToUpdate
˚˚A P
,
˚˚P Q
string
˚˚R X
bearerToken
˚˚Y d
)
˚˚d e
{
¸¸ 	
return
˝˝ 
await
˝˝ 
SendPut
˝˝  
<
˝˝  !
bool
˝˝! %
,
˝˝% &

ProductDTO
˝˝' 1
>
˝˝1 2
(
˝˝2 3
$str
˝˝3 H
,
˝˝H I
productToUpdate
˝˝J Y
,
˝˝Y Z
bearerToken
˝˝[ f
)
˝˝f g
;
˝˝g h
}
˛˛ 	
public
ÄÄ 
bool
ÄÄ 
UpdateProductDTO
ÄÄ $
(
ÄÄ$ %

ProductDTO
ÄÄ% /
productToUpdate
ÄÄ0 ?
,
ÄÄ? @
string
ÄÄA G
bearerToken
ÄÄH S
)
ÄÄS T
{
ÅÅ 	
bool
ÇÇ 
result
ÇÇ 
=
ÇÇ 
false
ÇÇ 
;
ÇÇ  
Task
ÉÉ 
.
ÉÉ 
Run
ÉÉ 
(
ÉÉ 
async
ÉÉ 
(
ÉÉ 
)
ÉÉ 
=>
ÉÉ  
result
ÉÉ! '
=
ÉÉ( )
await
ÉÉ* /#
UpdateProductDTOAsync
ÉÉ0 E
(
ÉÉE F
productToUpdate
ÉÉF U
,
ÉÉU V
bearerToken
ÉÉW b
)
ÉÉb c
)
ÉÉc d
.
ÉÉd e
Wait
ÉÉe i
(
ÉÉi j
)
ÉÉj k
;
ÉÉk l
return
ÑÑ 
result
ÑÑ 
;
ÑÑ 
}
ÖÖ 	
public
àà 
async
àà 
Task
àà 
<
àà 
bool
àà 
>
àà  
DeleteProductAsync
àà  2
(
àà2 3
int
àà3 6
ID
àà7 9
,
àà9 :
string
àà; A
bearerToken
ààB M
)
ààM N
{
ââ 	
return
ää 
await
ää 

SendDelete
ää #
(
ää# $
$"
ää$ &
$str
ää& :
{
ää: ;
ID
ää; =
}
ää= >
"
ää> ?
,
ää? @
bearerToken
ääA L
)
ääL M
;
ääM N
}
ãã 	
public
çç 
bool
çç 
DeleteProduct
çç !
(
çç! "
int
çç" %
ID
çç& (
,
çç( )
string
çç* 0
bearerToken
çç1 <
)
çç< =
{
éé 	
bool
èè 
result
èè 
=
èè 
false
èè 
;
èè  
Task
êê 
.
êê 
Run
êê 
(
êê 
async
êê 
(
êê 
)
êê 
=>
êê  
result
êê! '
=
êê( )
await
êê* / 
DeleteProductAsync
êê0 B
(
êêB C
ID
êêC E
,
êêE F
bearerToken
êêG R
)
êêR S
)
êêS T
.
êêT U
Wait
êêU Y
(
êêY Z
)
êêZ [
;
êê[ \
return
ëë 
result
ëë 
;
ëë 
}
íí 	
public
ïï 
List
ïï 
<
ïï 

ProductDTO
ïï 
>
ïï %
FilterProductsDTOByName
ïï  7
(
ïï7 8
string
ïï8 >
name
ïï? C
,
ïïC D
string
ïïE K
bearerToken
ïïL W
)
ïïW X
{
ññ 	
List
óó 
<
óó 

ProductDTO
óó 
>
óó 
result
óó #
=
óó$ %
null
óó& *
;
óó* +
Task
òò 
.
òò 
Run
òò 
(
òò 
async
òò 
(
òò 
)
òò 
=>
òò  
result
òò! '
=
òò( )
await
òò* /*
FilterProductsDTOByNameAsync
òò0 L
(
òòL M
name
òòM Q
,
òòQ R
bearerToken
òòS ^
)
òò^ _
)
òò_ `
.
òò` a
Wait
òòa e
(
òòe f
)
òòf g
;
òòg h
return
ôô 
result
ôô 
;
ôô 
}
öö 	
public
úú 
async
úú 
Task
úú 
<
úú 
List
úú 
<
úú 

ProductDTO
úú )
>
úú) *
>
úú* +*
FilterProductsDTOByNameAsync
úú, H
(
úúH I
string
úúI O
name
úúP T
,
úúT U
string
úúV \
bearerToken
úú] h
)
úúh i
{
ùù 	
string
üü 

requestURI
üü 
=
üü 
$"
üü  "
$str
üü" ;
{
üü; <
Uri
üü< ?
.
üü? @
EscapeDataString
üü@ P
(
üüP Q
name
üüQ U
)
üüU V
}
üüV W
"
üüW X
;
üüX Y
return
†† 
await
†† 
SendGet
††  
<
††  !
List
††! %
<
††% &

ProductDTO
††& 0
>
††0 1
>
††1 2
(
††2 3

requestURI
††3 =
,
††= >
bearerToken
††? J
)
††J K
;
††K L
}
°° 	
public
•• 
async
•• 
Task
•• 
<
•• 
CategoryDTO
•• %
>
••% &$
CreateCategoryDTOAsync
••' =
(
••= >
CategoryDTO
••> I
newCategory
••J U
,
••U V
string
••W ]
bearerToken
••^ i
)
••i j
{
¶¶ 	
return
ßß 
await
ßß 
SendPost
ßß !
<
ßß! "
CategoryDTO
ßß" -
,
ßß- .
CategoryDTO
ßß/ :
>
ßß: ;
(
ßß; <
$str
ßß< R
,
ßßR S
newCategory
ßßT _
,
ßß_ `
bearerToken
ßßa l
)
ßßl m
;
ßßm n
}
®® 	
public
™™ 
CategoryDTO
™™ 
CreateCategoryDTO
™™ ,
(
™™, -
CategoryDTO
™™- 8
newCategory
™™9 D
,
™™D E
string
™™F L
bearerToken
™™M X
)
™™X Y
{
´´ 	
try
¨¨ 
{
≠≠ 
CategoryDTO
ÆÆ 
result
ÆÆ "
=
ÆÆ# $
null
ÆÆ% )
;
ÆÆ) *
Task
±± 
.
±± 
Run
±± 
(
±± 
async
±± 
(
±±  
)
±±  !
=>
±±" $
result
±±% +
=
±±, -
await
±±. 3$
CreateCategoryDTOAsync
±±4 J
(
±±J K
newCategory
±±K V
,
±±V W
bearerToken
±±X c
)
±±c d
)
±±d e
.
±±e f
Wait
±±f j
(
±±j k
)
±±k l
;
±±l m
if
¥¥ 
(
¥¥ 
result
¥¥ 
==
¥¥ 
null
¥¥ "
)
¥¥" #
{
µµ 
return
∂∂ 
new
∂∂ 
CategoryDTO
∂∂ *
{
∑∑ 
CategoryName
∏∏ $
=
∏∏% &
$str
∏∏' .
,
∏∏. /
Description
ππ #
=
ππ$ %
$str
ππ& T
}
∫∫ 
;
∫∫ 
}
ªª 
return
ΩΩ 
result
ΩΩ 
;
ΩΩ 
}
ææ 
catch
øø 
(
øø 
	Exception
øø 
ex
øø 
)
øø  
{
¿¿ 
Console
¬¬ 
.
¬¬ 
	WriteLine
¬¬ !
(
¬¬! "
$"
¬¬" $
$str
¬¬$ >
{
¬¬> ?
ex
¬¬? A
.
¬¬A B
Message
¬¬B I
}
¬¬I J
"
¬¬J K
)
¬¬K L
;
¬¬L M
if
√√ 
(
√√ 
ex
√√ 
.
√√ 
InnerException
√√ %
!=
√√& (
null
√√) -
)
√√- .
{
ƒƒ 
Console
≈≈ 
.
≈≈ 
	WriteLine
≈≈ %
(
≈≈% &
$"
≈≈& (
$str
≈≈( 9
{
≈≈9 :
ex
≈≈: <
.
≈≈< =
InnerException
≈≈= K
.
≈≈K L
Message
≈≈L S
}
≈≈S T
"
≈≈T U
)
≈≈U V
;
≈≈V W
}
∆∆ 
return
…… 
new
…… 
CategoryDTO
…… &
{
   
CategoryName
ÀÀ  
=
ÀÀ! "
$str
ÀÀ# *
,
ÀÀ* +
Description
ÃÃ 
=
ÃÃ  !
$"
ÃÃ" $
$str
ÃÃ$ /
{
ÃÃ/ 0
ex
ÃÃ0 2
.
ÃÃ2 3
Message
ÃÃ3 :
}
ÃÃ: ;
"
ÃÃ; <
}
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}
œœ 	
public
’’ 
List
’’ 
<
’’ 
CategoryDTO
’’ 
>
’’  $
FilterCategoriesByName
’’! 7
(
’’7 8
string
’’8 >
name
’’? C
,
’’C D
string
’’E K
bearerToken
’’L W
)
’’W X
{
÷÷ 	
List
◊◊ 
<
◊◊ 
CategoryDTO
◊◊ 
>
◊◊ 
result
◊◊ $
=
◊◊% &
null
◊◊' +
;
◊◊+ ,
Task
ÿÿ 
.
ÿÿ 
Run
ÿÿ 
(
ÿÿ 
async
ÿÿ 
(
ÿÿ 
)
ÿÿ 
=>
ÿÿ  
result
ÿÿ! '
=
ÿÿ( )
await
ÿÿ* /)
FilterCategoriesByNameAsync
ÿÿ0 K
(
ÿÿK L
name
ÿÿL P
,
ÿÿP Q
bearerToken
ÿÿR ]
)
ÿÿ] ^
)
ÿÿ^ _
.
ÿÿ_ `
Wait
ÿÿ` d
(
ÿÿd e
)
ÿÿe f
;
ÿÿf g
return
ŸŸ 
result
ŸŸ 
;
ŸŸ 
}
⁄⁄ 	
public
‹‹ 
async
‹‹ 
Task
‹‹ 
<
‹‹ 
List
‹‹ 
<
‹‹ 
CategoryDTO
‹‹ *
>
‹‹* +
>
‹‹+ ,)
FilterCategoriesByNameAsync
‹‹- H
(
‹‹H I
string
‹‹I O
name
‹‹P T
,
‹‹T U
string
‹‹V \
bearerToken
‹‹] h
)
‹‹h i
{
›› 	
string
ﬁﬁ 

requestURI
ﬁﬁ 
=
ﬁﬁ 
$"
ﬁﬁ  "
$str
ﬁﬁ" <
{
ﬁﬁ< =
Uri
ﬁﬁ= @
.
ﬁﬁ@ A
EscapeDataString
ﬁﬁA Q
(
ﬁﬁQ R
name
ﬁﬁR V
)
ﬁﬁV W
}
ﬁﬁW X
"
ﬁﬁX Y
;
ﬁﬁY Z
return
ﬂﬂ 
await
ﬂﬂ 
SendGet
ﬂﬂ  
<
ﬂﬂ  !
List
ﬂﬂ! %
<
ﬂﬂ% &
CategoryDTO
ﬂﬂ& 1
>
ﬂﬂ1 2
>
ﬂﬂ2 3
(
ﬂﬂ3 4

requestURI
ﬂﬂ4 >
,
ﬂﬂ> ?
bearerToken
ﬂﬂ@ K
)
ﬂﬂK L
;
ﬂﬂL M
}
‡‡ 	
public
„„ 
CategoryDTO
„„ 
GetCategoryById
„„ *
(
„„* +
int
„„+ .
id
„„/ 1
,
„„1 2
string
„„3 9
bearerToken
„„: E
)
„„E F
{
‰‰ 	
CategoryDTO
ÂÂ 
result
ÂÂ 
=
ÂÂ  
null
ÂÂ! %
;
ÂÂ% &
Task
ÊÊ 
.
ÊÊ 
Run
ÊÊ 
(
ÊÊ 
async
ÊÊ 
(
ÊÊ 
)
ÊÊ 
=>
ÊÊ  
result
ÊÊ! '
=
ÊÊ( )
await
ÊÊ* /"
GetCategoryByIdAsync
ÊÊ0 D
(
ÊÊD E
id
ÊÊE G
,
ÊÊG H
bearerToken
ÊÊI T
)
ÊÊT U
)
ÊÊU V
.
ÊÊV W
Wait
ÊÊW [
(
ÊÊ[ \
)
ÊÊ\ ]
;
ÊÊ] ^
return
ÁÁ 
result
ÁÁ 
;
ÁÁ 
}
ËË 	
public
ÍÍ 
async
ÍÍ 
Task
ÍÍ 
<
ÍÍ 
CategoryDTO
ÍÍ %
>
ÍÍ% &"
GetCategoryByIdAsync
ÍÍ' ;
(
ÍÍ; <
int
ÍÍ< ?
id
ÍÍ@ B
,
ÍÍB C
string
ÍÍD J
bearerToken
ÍÍK V
)
ÍÍV W
{
ÎÎ 	
string
ÏÏ 

requestURI
ÏÏ 
=
ÏÏ 
$"
ÏÏ  "
$str
ÏÏ" 8
{
ÏÏ8 9
id
ÏÏ9 ;
}
ÏÏ; <
"
ÏÏ< =
;
ÏÏ= >
return
ÌÌ 
await
ÌÌ 
SendGet
ÌÌ  
<
ÌÌ  !
CategoryDTO
ÌÌ! ,
>
ÌÌ, -
(
ÌÌ- .

requestURI
ÌÌ. 8
,
ÌÌ8 9
bearerToken
ÌÌ: E
)
ÌÌE F
;
ÌÌF G
}
ÓÓ 	
public
ÒÒ 
bool
ÒÒ 
UpdateCategory
ÒÒ "
(
ÒÒ" #
CategoryDTO
ÒÒ# .
categoryToUpdate
ÒÒ/ ?
,
ÒÒ? @
string
ÒÒA G
bearerToken
ÒÒH S
)
ÒÒS T
{
ÚÚ 	
bool
ÛÛ 
result
ÛÛ 
=
ÛÛ 
false
ÛÛ 
;
ÛÛ  
Task
ÙÙ 
.
ÙÙ 
Run
ÙÙ 
(
ÙÙ 
async
ÙÙ 
(
ÙÙ 
)
ÙÙ 
=>
ÙÙ  
result
ÙÙ! '
=
ÙÙ( )
await
ÙÙ* /!
UpdateCategoryAsync
ÙÙ0 C
(
ÙÙC D
categoryToUpdate
ÙÙD T
,
ÙÙT U
bearerToken
ÙÙV a
)
ÙÙa b
)
ÙÙb c
.
ÙÙc d
Wait
ÙÙd h
(
ÙÙh i
)
ÙÙi j
;
ÙÙj k
return
ıı 
result
ıı 
;
ıı 
}
ˆˆ 	
public
¯¯ 
async
¯¯ 
Task
¯¯ 
<
¯¯ 
bool
¯¯ 
>
¯¯ !
UpdateCategoryAsync
¯¯  3
(
¯¯3 4
CategoryDTO
¯¯4 ?
categoryToUpdate
¯¯@ P
,
¯¯P Q
string
¯¯R X
bearerToken
¯¯Y d
)
¯¯d e
{
˘˘ 	
return
˙˙ 
await
˙˙ 
SendPut
˙˙  
<
˙˙  !
bool
˙˙! %
,
˙˙% &
CategoryDTO
˙˙' 2
>
˙˙2 3
(
˙˙3 4
$str
˙˙4 J
,
˙˙J K
categoryToUpdate
˙˙L \
,
˙˙\ ]
bearerToken
˙˙^ i
)
˙˙i j
;
˙˙j k
}
˚˚ 	
public
˛˛ 
bool
˛˛ 
DeleteCategory
˛˛ "
(
˛˛" #
int
˛˛# &
id
˛˛' )
,
˛˛) *
string
˛˛+ 1
bearerToken
˛˛2 =
)
˛˛= >
{
ˇˇ 	
bool
ÄÄ 
result
ÄÄ 
=
ÄÄ 
false
ÄÄ 
;
ÄÄ  
Task
ÅÅ 
.
ÅÅ 
Run
ÅÅ 
(
ÅÅ 
async
ÅÅ 
(
ÅÅ 
)
ÅÅ 
=>
ÅÅ  
result
ÅÅ! '
=
ÅÅ( )
await
ÅÅ* /!
DeleteCategoryAsync
ÅÅ0 C
(
ÅÅC D
id
ÅÅD F
,
ÅÅF G
bearerToken
ÅÅH S
)
ÅÅS T
)
ÅÅT U
.
ÅÅU V
Wait
ÅÅV Z
(
ÅÅZ [
)
ÅÅ[ \
;
ÅÅ\ ]
return
ÇÇ 
result
ÇÇ 
;
ÇÇ 
}
ÉÉ 	
public
ÖÖ 
async
ÖÖ 
Task
ÖÖ 
<
ÖÖ 
bool
ÖÖ 
>
ÖÖ !
DeleteCategoryAsync
ÖÖ  3
(
ÖÖ3 4
int
ÖÖ4 7
id
ÖÖ8 :
,
ÖÖ: ;
string
ÖÖ< B
bearerToken
ÖÖC N
)
ÖÖN O
{
ÜÜ 	
string
áá 

requestURI
áá 
=
áá 
$"
áá  "
$str
áá" 7
{
áá7 8
id
áá8 :
}
áá: ;
"
áá; <
;
áá< =
return
àà 
await
àà 

SendDelete
àà #
(
àà# $

requestURI
àà$ .
,
àà. /
bearerToken
àà0 ;
)
àà; <
;
àà< =
}
ââ 	
public
åå 
List
åå 
<
åå 
CategoryDTO
åå 
>
åå  
GetAllCategories
åå! 1
(
åå1 2
string
åå2 8
bearerToken
åå9 D
)
ååD E
{
çç 	
List
éé 
<
éé 
CategoryDTO
éé 
>
éé 
result
éé $
=
éé% &
null
éé' +
;
éé+ ,
Task
èè 
.
èè 
Run
èè 
(
èè 
async
èè 
(
èè 
)
èè 
=>
èè  
result
èè! '
=
èè( )
await
èè* /#
GetAllCategoriesAsync
èè0 E
(
èèE F
bearerToken
èèF Q
)
èèQ R
)
èèR S
.
èèS T
Wait
èèT X
(
èèX Y
)
èèY Z
;
èèZ [
return
êê 
result
êê 
;
êê 
}
ëë 	
public
ìì 
async
ìì 
Task
ìì 
<
ìì 
List
ìì 
<
ìì 
CategoryDTO
ìì *
>
ìì* +
>
ìì+ ,#
GetAllCategoriesAsync
ìì- B
(
ììB C
string
ììD J
bearerToken
ììK V
)
ììV W
{
îî 	
string
ïï 

requestURI
ïï 
=
ïï 
$"
ïï  "
$str
ïï" 6
"
ïï6 7
;
ïï7 8
return
ññ 
await
ññ 
SendGet
ññ  
<
ññ  !
List
ññ! %
<
ññ% &
CategoryDTO
ññ& 1
>
ññ1 2
>
ññ2 3
(
ññ3 4

requestURI
ññ4 >
,
ññ> ?
bearerToken
ññ@ K
)
ññK L
;
ññL M
}
óó 	
public
õõ 
string
õõ 
Login
õõ 
(
õõ 
string
õõ "
username
õõ# +
,
õõ+ ,
string
õõ- 3
password
õõ4 <
)
õõ< =
{
úú 	
string
ùù 
token
ùù 
=
ùù 
null
ùù 
;
ùù  
try
üü 
{
†† 
Task
¢¢ 
.
¢¢ 
Run
¢¢ 
(
¢¢ 
async
¢¢ 
(
¢¢  
)
¢¢  !
=>
¢¢" $
token
¢¢% *
=
¢¢+ ,
await
¢¢- 2

LoginAsync
¢¢3 =
(
¢¢= >
username
¢¢> F
,
¢¢F G
password
¢¢H P
)
¢¢P Q
)
¢¢Q R
.
¢¢R S
Wait
¢¢S W
(
¢¢W X
)
¢¢X Y
;
¢¢Y Z
if
££ 
(
££ 
token
££ 
==
££ 
$str
££ 4
)
££4 5
{
§§ 
token
•• 
=
•• 
null
••  
;
••  !
}
¶¶ 
}
ßß 
catch
®® 
(
®® 
	Exception
®® 
ex
®® 
)
®®  
{
©© 
}
™™ 
return
≠≠ 
token
≠≠ 
;
≠≠ 
}
ÆÆ 	
public
∞∞ 
async
∞∞ 
Task
∞∞ 
<
∞∞ 
string
∞∞  
>
∞∞  !

LoginAsync
∞∞" ,
(
∞∞, -
string
∞∞- 3
username
∞∞4 <
,
∞∞< =
string
∞∞> D
password
∞∞E M
)
∞∞M N
{
±± 	
var
≤≤ 
	loginData
≤≤ 
=
≤≤ 
new
≤≤ 
{
≥≥ 
username
¥¥ 
=
¥¥ 
username
¥¥ #
,
¥¥# $
password
µµ 
=
µµ 
password
µµ #
}
∂∂ 
;
∂∂ 
string
∫∫ 

requestURI
∫∫ 
=
∫∫ 
$str
∫∫  2
;
∫∫2 3

requestURI
ªª 
=
ªª 
BaseAddress
ªª $
+
ªª% &

requestURI
ªª' 1
;
ªª1 2
string
ΩΩ 
result
ΩΩ 
=
ΩΩ 
null
ΩΩ  
;
ΩΩ  !
using
øø 
(
øø 
var
øø 
client
øø 
=
øø 
new
øø  #

HttpClient
øø$ .
(
øø. /
)
øø/ 0
)
øø0 1
{
¿¿ 
try
¡¡ 
{
¬¬ 
client
√√ 
.
√√ #
DefaultRequestHeaders
√√ 0
.
√√0 1
Accept
√√1 7
.
√√7 8
Clear
√√8 =
(
√√= >
)
√√> ?
;
√√? @
client
ƒƒ 
.
ƒƒ #
DefaultRequestHeaders
ƒƒ 0
.
ƒƒ0 1
Accept
ƒƒ1 7
.
ƒƒ7 8
Add
ƒƒ8 ;
(
ƒƒ; <
new
ƒƒ< ?-
MediaTypeWithQualityHeaderValue
ƒƒ@ _
(
ƒƒ_ `
$str
ƒƒ` r
)
ƒƒr s
)
ƒƒs t
;
ƒƒt u
var
∆∆ 
jsonData
∆∆  
=
∆∆! "
JsonConvert
∆∆# .
.
∆∆. /
SerializeObject
∆∆/ >
(
∆∆> ?
	loginData
∆∆? H
)
∆∆H I
;
∆∆I J!
HttpResponseMessage
«« '
response
««( 0
=
««1 2
await
««3 8
client
««9 ?
.
««? @
	PostAsync
««@ I
(
««I J

requestURI
»» "
,
»»" #
new
…… 
StringContent
…… )
(
……) *
jsonData
……* 2
,
……2 3
Encoding
……4 <
.
……< =
UTF8
……= A
,
……A B
$str
……C U
)
……U V
)
……V W
;
……W X
if
ÀÀ 
(
ÀÀ 
response
ÀÀ  
.
ÀÀ  !!
IsSuccessStatusCode
ÀÀ! 4
)
ÀÀ4 5
{
ÃÃ 
result
ÕÕ 
=
ÕÕ  
await
ÕÕ! &
response
ÕÕ' /
.
ÕÕ/ 0
Content
ÕÕ0 7
.
ÕÕ7 8
ReadAsStringAsync
ÕÕ8 I
(
ÕÕI J
)
ÕÕJ K
;
ÕÕK L
}
ŒŒ 
else
œœ 
{
–– 
}
““ 
}
”” 
catch
‘‘ 
(
‘‘ 
	Exception
‘‘  
ex
‘‘! #
)
‘‘# $
{
’’ 
return
◊◊ 
$"
◊◊ 
$str
◊◊ 2
"
◊◊2 3
;
◊◊3 4
}
ÿÿ 
}
ŸŸ 
return
€€ 
result
€€ 
;
€€ 
}
‹‹ 	
public
ﬂﬂ 
string
ﬂﬂ 
Register
ﬂﬂ 
(
ﬂﬂ 
string
ﬂﬂ %
username
ﬂﬂ& .
,
ﬂﬂ. /
string
ﬂﬂ0 6
password
ﬂﬂ7 ?
,
ﬂﬂ? @
string
ﬂﬂA G
rol
ﬂﬂH K
,
ﬂﬂK L
string
ﬂﬂM S
emailAddress
ﬂﬂT `
,
ﬂﬂ` a
string
ﬂﬂb h
	firstName
ﬂﬂi r
,
ﬂﬂr s
string
ﬂﬂt z
lastNameﬂﬂ{ É
)ﬂﬂÉ Ñ
{
‡‡ 	
string
·· 
resultMessage
··  
=
··! "
$str
··# 6
;
··6 7
try
„„ 
{
‰‰ 
Task
ÊÊ 
.
ÊÊ 
Run
ÊÊ 
(
ÊÊ 
async
ÊÊ 
(
ÊÊ  
)
ÊÊ  !
=>
ÊÊ" $
resultMessage
ÊÊ% 2
=
ÊÊ3 4
await
ÊÊ5 :
RegisterAsync
ÊÊ; H
(
ÊÊH I
username
ÊÊI Q
,
ÊÊQ R
password
ÊÊS [
,
ÊÊ[ \
rol
ÊÊ] `
,
ÊÊ` a
emailAddress
ÊÊb n
,
ÊÊn o
	firstName
ÊÊp y
,
ÊÊy z
lastNameÊÊ{ É
)ÊÊÉ Ñ
)ÊÊÑ Ö
.ÊÊÖ Ü
WaitÊÊÜ ä
(ÊÊä ã
)ÊÊã å
;ÊÊå ç
}
ÁÁ 
catch
ËË 
(
ËË 
	Exception
ËË 
ex
ËË 
)
ËË  
{
ÈÈ 
resultMessage
ÎÎ 
=
ÎÎ 
$"
ÎÎ  "
$str
ÎÎ" C
{
ÎÎC D
ex
ÎÎD F
.
ÎÎF G
Message
ÎÎG N
}
ÎÎN O
"
ÎÎO P
;
ÎÎP Q
}
ÏÏ 
return
ÓÓ 
resultMessage
ÓÓ  
;
ÓÓ  !
}
ÔÔ 	
public
 
async
 
Task
 
<
 
string
  
>
  !
RegisterAsync
" /
(
/ 0
string
0 6
username
7 ?
,
? @
string
A G
password
H P
,
P Q
string
R X
rol
Y \
,
\ ]
string
^ d
emailAddress
e q
,
q r
string
s y
	firstNamez É
,É Ñ
stringÖ ã
lastNameå î
)î ï
{
ÒÒ 	
string
ÛÛ 

requestURI
ÛÛ 
=
ÛÛ 
$"
ÛÛ  "
$str
ÛÛ" ?
{
ÛÛ? @
username
ÛÛ@ H
}
ÛÛH I
$str
ÛÛI S
{
ÛÛS T
password
ÛÛT \
}
ÛÛ\ ]
$str
ÛÛ] b
{
ÛÛb c
rol
ÛÛc f
}
ÛÛf g
$str
ÛÛg u
{
ÛÛu v
emailAddressÛÛv Ç
}ÛÛÇ É
$strÛÛÉ é
{ÛÛé è
	firstNameÛÛè ò
}ÛÛò ô
$strÛÛô £
{ÛÛ£ §
lastNameÛÛ§ ¨
}ÛÛ¨ ≠
"ÛÛ≠ Æ
;ÛÛÆ Ø

requestURI
ÙÙ 
=
ÙÙ 
BaseAddress
ÙÙ $
+
ÙÙ% &

requestURI
ÙÙ' 1
;
ÙÙ1 2
using
ıı 
(
ıı 
var
ıı 
client
ıı 
=
ıı 
new
ıı  #

HttpClient
ıı$ .
(
ıı. /
)
ıı/ 0
)
ıı0 1
{
ˆˆ 
try
˜˜ 
{
¯¯ 
client
˘˘ 
.
˘˘ #
DefaultRequestHeaders
˘˘ 0
.
˘˘0 1
Accept
˘˘1 7
.
˘˘7 8
Clear
˘˘8 =
(
˘˘= >
)
˘˘> ?
;
˘˘? @
client
˙˙ 
.
˙˙ #
DefaultRequestHeaders
˙˙ 0
.
˙˙0 1
Accept
˙˙1 7
.
˙˙7 8
Add
˙˙8 ;
(
˙˙; <
new
˙˙< ?-
MediaTypeWithQualityHeaderValue
˙˙@ _
(
˙˙_ `
$str
˙˙` r
)
˙˙r s
)
˙˙s t
;
˙˙t u!
HttpResponseMessage
˝˝ '
response
˝˝( 0
=
˝˝1 2
await
˝˝3 8
client
˝˝9 ?
.
˝˝? @
	PostAsync
˝˝@ I
(
˝˝I J

requestURI
˝˝J T
,
˝˝T U
null
˝˝V Z
)
˝˝Z [
;
˝˝[ \
string
ÄÄ 
responseContent
ÄÄ *
=
ÄÄ+ ,
await
ÄÄ- 2
response
ÄÄ3 ;
.
ÄÄ; <
Content
ÄÄ< C
.
ÄÄC D
ReadAsStringAsync
ÄÄD U
(
ÄÄU V
)
ÄÄV W
;
ÄÄW X
if
ÉÉ 
(
ÉÉ 
responseContent
ÉÉ '
.
ÉÉ' (
Trim
ÉÉ( ,
(
ÉÉ, -
)
ÉÉ- .
.
ÉÉ. /
ToLower
ÉÉ/ 6
(
ÉÉ6 7
)
ÉÉ7 8
==
ÉÉ9 ;
$str
ÉÉ< B
)
ÉÉB C
{
ÑÑ 
return
ÖÖ 
$str
ÖÖ 1
;
ÖÖ1 2
}
ÜÜ 
else
áá 
{
àà 
return
ââ 
$str
ââ O
;
ââO P
}
ää 
}
ãã 
catch
åå 
(
åå "
HttpRequestException
åå +
ex
åå, .
)
åå. /
{
çç 
return
éé 
$"
éé 
$str
éé 0
{
éé0 1
ex
éé1 3
.
éé3 4
Message
éé4 ;
}
éé; <
"
éé< =
;
éé= >
}
èè 
catch
êê 
(
êê 
	Exception
êê  
ex
êê! #
)
êê# $
{
ëë 
return
íí 
$"
íí 
$str
íí :
{
íí: ;
ex
íí; =
.
íí= >
Message
íí> E
}
ííE F
"
ííF G
;
ííG H
}
ìì 
}
îî 
}
ïï 	
public
ññ 
async
ññ 
Task
ññ 
<
ññ 
bool
ññ 
>
ññ 
VerificarUsuario
ññ  0
(
ññ0 1
string
ññ1 7
username
ññ8 @
)
ññ@ A
{
óó 	
bool
òò 
isUserValid
òò 
=
òò 
false
òò $
;
òò$ %
try
ôô 
{
öö 
var
úú 

verifyData
úú 
=
úú  
new
úú! $
{
ùù 
username
ûû 
=
ûû 
username
ûû '
}
üü 
;
üü 
string
¢¢ 

requestURI
¢¢ !
=
¢¢" #
$str
¢¢$ A
;
¢¢A B
isUserValid
•• 
=
•• 
await
•• #
SendPost
••$ ,
<
••, -
bool
••- 1
,
••1 2
object
••3 9
>
••9 :
(
••: ;

requestURI
••; E
,
••E F

verifyData
••G Q
,
••Q R
string
••S Y
.
••Y Z
Empty
••Z _
)
••_ `
;
••` a
}
¶¶ 
catch
ßß 
(
ßß 
	Exception
ßß 
ex
ßß 
)
ßß  
{
®® 
Console
™™ 
.
™™ 
	WriteLine
™™ !
(
™™! "
$"
™™" $
$str
™™$ J
{
™™J K
ex
™™K M
.
™™M N
Message
™™N U
}
™™U V
"
™™V W
)
™™W X
;
™™X Y
}
´´ 
return
≠≠ 
isUserValid
≠≠ 
;
≠≠ 
}
ÆÆ 	
public
≤≤ 
string
≤≤ 
obtenerCorreo
≤≤ #
(
≤≤# $
string
≤≤$ *
username
≤≤+ 3
)
≤≤3 4
{
≥≥ 	
try
¥¥ 
{
µµ 
string
∑∑ 

requestURI
∑∑ !
=
∑∑" #
$"
∑∑$ &
$str
∑∑& H
{
∑∑H I
username
∑∑I Q
}
∑∑Q R
"
∑∑R S
;
∑∑S T

requestURI
∏∏ 
=
∏∏ 
BaseAddress
∏∏ (
+
∏∏) *

requestURI
∏∏+ 5
;
∏∏5 6
using
∫∫ 
(
∫∫ 
var
∫∫ 
client
∫∫ !
=
∫∫" #
new
∫∫$ '

HttpClient
∫∫( 2
(
∫∫2 3
)
∫∫3 4
)
∫∫4 5
{
ªª 
client
ºº 
.
ºº #
DefaultRequestHeaders
ºº 0
.
ºº0 1
Accept
ºº1 7
.
ºº7 8
Clear
ºº8 =
(
ºº= >
)
ºº> ?
;
ºº? @
client
ΩΩ 
.
ΩΩ #
DefaultRequestHeaders
ΩΩ 0
.
ΩΩ0 1
Accept
ΩΩ1 7
.
ΩΩ7 8
Add
ΩΩ8 ;
(
ΩΩ; <
new
ΩΩ< ?-
MediaTypeWithQualityHeaderValue
ΩΩ@ _
(
ΩΩ_ `
$str
ΩΩ` r
)
ΩΩr s
)
ΩΩs t
;
ΩΩt u!
HttpResponseMessage
¿¿ '
response
¿¿( 0
=
¿¿1 2
client
¿¿3 9
.
¿¿9 :
GetAsync
¿¿: B
(
¿¿B C

requestURI
¿¿C M
)
¿¿M N
.
¿¿N O
Result
¿¿O U
;
¿¿U V
string
√√ 
responseContent
√√ *
=
√√+ ,
response
√√- 5
.
√√5 6
Content
√√6 =
.
√√= >
ReadAsStringAsync
√√> O
(
√√O P
)
√√P Q
.
√√Q R
Result
√√R X
;
√√X Y
if
∆∆ 
(
∆∆ 
response
∆∆  
.
∆∆  !!
IsSuccessStatusCode
∆∆! 4
&&
∆∆5 7
!
∆∆8 9
string
∆∆9 ?
.
∆∆? @
IsNullOrEmpty
∆∆@ M
(
∆∆M N
responseContent
∆∆N ]
)
∆∆] ^
)
∆∆^ _
{
«« 
return
»» 
responseContent
»» .
.
»». /
Trim
»»/ 3
(
»»3 4
)
»»4 5
;
»»5 6
}
…… 
else
   
{
ÀÀ 
return
ÃÃ 
$str
ÃÃ J
;
ÃÃJ K
}
ÕÕ 
}
ŒŒ 
}
œœ 
catch
–– 
(
–– "
HttpRequestException
–– '
ex
––( *
)
––* +
{
—— 
return
““ 
$"
““ 
$str
““ ,
{
““, -
ex
““- /
.
““/ 0
Message
““0 7
}
““7 8
"
““8 9
;
““9 :
}
”” 
catch
‘‘ 
(
‘‘ 
	Exception
‘‘ 
ex
‘‘ 
)
‘‘  
{
’’ 
return
÷÷ 
$"
÷÷ 
$str
÷÷ 6
{
÷÷6 7
ex
÷÷7 9
.
÷÷9 :
Message
÷÷: A
}
÷÷A B
"
÷÷B C
;
÷÷C D
}
◊◊ 
}
ÿÿ 	
public
‹‹ 
async
‹‹ 
Task
‹‹ 
<
‹‹ 
bool
‹‹ 
>
‹‹ "
RegisterLoginAttempt
‹‹  4
(
‹‹4 5
string
‹‹5 ;
username
‹‹< D
)
‹‹D E
{
›› 	
var
ﬁﬁ 
data
ﬁﬁ 
=
ﬁﬁ 
new
ﬁﬁ 
{
ﬁﬁ 
Username
ﬁﬁ %
=
ﬁﬁ& '
username
ﬁﬁ( 0
}
ﬁﬁ1 2
;
ﬁﬁ2 3
return
ﬂﬂ 
await
ﬂﬂ 
SendPost
ﬂﬂ !
<
ﬂﬂ! "
bool
ﬂﬂ" &
,
ﬂﬂ& '
object
ﬂﬂ( .
>
ﬂﬂ. /
(
ﬂﬂ/ 0
$str
ﬂﬂ0 M
,
ﬂﬂM N
data
ﬂﬂO S
,
ﬂﬂS T
string
ﬂﬂU [
.
ﬂﬂ[ \
Empty
ﬂﬂ\ a
)
ﬂﬂa b
;
ﬂﬂb c
}
‡‡ 	
public
„„ 
bool
„„ &
RegisterLoginAttemptSync
„„ ,
(
„„, -
string
„„- 3
username
„„4 <
)
„„< =
{
‰‰ 	
bool
ÂÂ 
result
ÂÂ 
=
ÂÂ 
false
ÂÂ 
;
ÂÂ  
Task
ÊÊ 
.
ÊÊ 
Run
ÊÊ 
(
ÊÊ 
async
ÊÊ 
(
ÊÊ 
)
ÊÊ 
=>
ÊÊ  
result
ÊÊ! '
=
ÊÊ( )
await
ÊÊ* /"
RegisterLoginAttempt
ÊÊ0 D
(
ÊÊD E
username
ÊÊE M
)
ÊÊM N
)
ÊÊN O
.
ÊÊO P
Wait
ÊÊP T
(
ÊÊT U
)
ÊÊU V
;
ÊÊV W
return
ÁÁ 
result
ÁÁ 
;
ÁÁ 
}
ËË 	
public
ÎÎ 
async
ÎÎ 
Task
ÎÎ 
<
ÎÎ 
bool
ÎÎ 
>
ÎÎ 
IsAccountBlocked
ÎÎ  0
(
ÎÎ0 1
string
ÎÎ1 7
username
ÎÎ8 @
)
ÎÎ@ A
{
ÏÏ 	
return
ÌÌ 
await
ÌÌ 
SendGet
ÌÌ  
<
ÌÌ  !
bool
ÌÌ! %
>
ÌÌ% &
(
ÌÌ& '
$"
ÌÌ' )
$str
ÌÌ) O
{
ÌÌO P
username
ÌÌP X
}
ÌÌX Y
"
ÌÌY Z
,
ÌÌZ [
string
ÌÌ\ b
.
ÌÌb c
Empty
ÌÌc h
)
ÌÌh i
;
ÌÌi j
}
ÓÓ 	
public
ÒÒ 
bool
ÒÒ "
IsAccountBlockedSync
ÒÒ (
(
ÒÒ( )
string
ÒÒ) /
username
ÒÒ0 8
)
ÒÒ8 9
{
ÚÚ 	
bool
ÛÛ 
result
ÛÛ 
=
ÛÛ 
false
ÛÛ 
;
ÛÛ  
Task
ÙÙ 
.
ÙÙ 
Run
ÙÙ 
(
ÙÙ 
async
ÙÙ 
(
ÙÙ 
)
ÙÙ 
=>
ÙÙ  
result
ÙÙ! '
=
ÙÙ( )
await
ÙÙ* /
IsAccountBlocked
ÙÙ0 @
(
ÙÙ@ A
username
ÙÙA I
)
ÙÙI J
)
ÙÙJ K
.
ÙÙK L
Wait
ÙÙL P
(
ÙÙP Q
)
ÙÙQ R
;
ÙÙR S
return
ıı 
result
ıı 
;
ıı 
}
ˆˆ 	
public
˘˘ 
async
˘˘ 
Task
˘˘ 
<
˘˘ 
bool
˘˘ 
>
˘˘ 
UnlockAccount
˘˘  -
(
˘˘- .
string
˘˘. 4
username
˘˘5 =
)
˘˘= >
{
˙˙ 	
return
˚˚ 
await
˚˚ 
SendPost
˚˚ !
<
˚˚! "
bool
˚˚" &
,
˚˚& '
object
˚˚( .
>
˚˚. /
(
˚˚/ 0
$"
˚˚0 2
$str
˚˚2 U
{
˚˚U V
username
˚˚V ^
}
˚˚^ _
"
˚˚_ `
,
˚˚` a
null
˚˚b f
,
˚˚f g
string
˚˚h n
.
˚˚n o
Empty
˚˚o t
)
˚˚t u
;
˚˚u v
}
¸¸ 	
public
ˇˇ 
bool
ˇˇ 
UnlockAccountSync
ˇˇ %
(
ˇˇ% &
string
ˇˇ& ,
username
ˇˇ- 5
)
ˇˇ5 6
{
ÄÄ 	
bool
ÅÅ 
result
ÅÅ 
=
ÅÅ 
false
ÅÅ 
;
ÅÅ  
Task
ÇÇ 
.
ÇÇ 
Run
ÇÇ 
(
ÇÇ 
async
ÇÇ 
(
ÇÇ 
)
ÇÇ 
=>
ÇÇ  
result
ÇÇ! '
=
ÇÇ( )
await
ÇÇ* /
UnlockAccount
ÇÇ0 =
(
ÇÇ= >
username
ÇÇ> F
)
ÇÇF G
)
ÇÇG H
.
ÇÇH I
Wait
ÇÇI M
(
ÇÇM N
)
ÇÇN O
;
ÇÇO P
return
ÉÉ 
result
ÉÉ 
;
ÉÉ 
}
ÑÑ 	
public
áá 
async
áá 
Task
áá 
<
áá 
bool
áá 
>
áá  
ResetLoginAttempts
áá  2
(
áá2 3
string
áá3 9
username
áá: B
)
ááB C
{
àà 	
return
ââ 
await
ââ 
SendPost
ââ !
<
ââ! "
bool
ââ" &
,
ââ& '
object
ââ( .
>
ââ. /
(
ââ/ 0
$"
ââ0 2
$str
ââ2 T
{
ââT U
username
ââU ]
}
ââ] ^
"
ââ^ _
,
ââ_ `
null
ââa e
,
ââe f
string
ââg m
.
ââm n
Empty
âân s
)
ââs t
;
âât u
}
ää 	
public
çç 
bool
çç $
ResetLoginAttemptsSync
çç *
(
çç* +
string
çç+ 1
username
çç2 :
)
çç: ;
{
éé 	
bool
èè 
result
èè 
=
èè 
false
èè 
;
èè  
Task
êê 
.
êê 
Run
êê 
(
êê 
async
êê 
(
êê 
)
êê 
=>
êê  
result
êê! '
=
êê( )
await
êê* / 
ResetLoginAttempts
êê0 B
(
êêB C
username
êêC K
)
êêK L
)
êêL M
.
êêM N
Wait
êêN R
(
êêR S
)
êêS T
;
êêT U
return
ëë 
result
ëë 
;
ëë 
}
íí 	
public
ïï 
async
ïï 
Task
ïï 
<
ïï 
List
ïï 
<
ïï 
LoginAttempts
ïï ,
>
ïï, -
>
ïï- .!
GetAllLoginAttempts
ïï/ B
(
ïïB C
)
ïïC D
{
ññ 	
return
óó 
await
óó 
SendGet
óó  
<
óó  !
List
óó! %
<
óó% &
LoginAttempts
óó& 3
>
óó3 4
>
óó4 5
(
óó5 6
$str
óó6 Q
,
óóQ R
string
óóS Y
.
óóY Z
Empty
óóZ _
)
óó_ `
;
óó` a
}
òò 	
public
õõ 
List
õõ 
<
õõ 
LoginAttempts
õõ !
>
õõ! "%
GetAllLoginAttemptsSync
õõ# :
(
õõ: ;
)
õõ; <
{
úú 	
List
ùù 
<
ùù 
LoginAttempts
ùù 
>
ùù 
result
ùù  &
=
ùù' (
null
ùù) -
;
ùù- .
Task
ûû 
.
ûû 
Run
ûû 
(
ûû 
async
ûû 
(
ûû 
)
ûû 
=>
ûû  
result
ûû! '
=
ûû( )
await
ûû* /!
GetAllLoginAttempts
ûû0 C
(
ûûC D
)
ûûD E
)
ûûE F
.
ûûF G
Wait
ûûG K
(
ûûK L
)
ûûL M
;
ûûM N
return
üü 
result
üü 
;
üü 
}
†† 	
public
££ 
async
££ 
Task
££ 
<
££ 
LoginAttempts
££ '
>
££' (-
RetrieveLoginAttemptsByUsername
££) H
(
££H I
string
££I O
username
££P X
)
££X Y
{
§§ 	
return
•• 
await
•• 
SendGet
••  
<
••  !
LoginAttempts
••! .
>
••. /
(
••/ 0
$"
••0 2
$str
••2 W
{
••W X
username
••X `
}
••` a
"
••a b
,
••b c
string
••d j
.
••j k
Empty
••k p
)
••p q
;
••q r
}
¶¶ 	
public
©© 
LoginAttempts
©© 1
#RetrieveLoginAttemptsByUsernameSync
©© @
(
©©@ A
string
©©A G
username
©©H P
)
©©P Q
{
™™ 	
LoginAttempts
´´ 
result
´´  
=
´´! "
null
´´# '
;
´´' (
Task
¨¨ 
.
¨¨ 
Run
¨¨ 
(
¨¨ 
async
¨¨ 
(
¨¨ 
)
¨¨ 
=>
¨¨  
result
¨¨! '
=
¨¨( )
await
¨¨* /-
RetrieveLoginAttemptsByUsername
¨¨0 O
(
¨¨O P
username
¨¨P X
)
¨¨X Y
)
¨¨Y Z
.
¨¨Z [
Wait
¨¨[ _
(
¨¨_ `
)
¨¨` a
;
¨¨a b
return
≠≠ 
result
≠≠ 
;
≠≠ 
}
ÆÆ 	
}
±± 
}≤≤ 